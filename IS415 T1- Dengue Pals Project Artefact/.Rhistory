} else if (input$variable_tab5 == "HDB 3-Room Flats"){
ggplotly(ggplot(data=placeholder_cuberoot, aes(x=`HDB 3-Room Flats`)) +
theme_classic() +
geom_histogram(bins=10, color="black", fill="orange") +
ggtitle("Cube root Transformation"))
} else if (input$variable_tab5 == "HDB 4-Room Flats"){
ggplotly(ggplot(data=placeholder_cuberoot, aes(x=`HDB 4-Room Flats`)) +
theme_classic() +
geom_histogram(bins=10, color="black", fill="orange") +
ggtitle("Cube root Transformation"))
} else if (input$variable_tab5 == "HDB 5-Room and Executive Flats"){
ggplotly(ggplot(data=placeholder_cuberoot, aes(x=`HDB 5-Room and Executive Flats`)) +
theme_classic() +
geom_histogram(bins=10, color="black", fill="orange") +
ggtitle("Cube root Transformation"))
} else if (input$variable_tab5 == "Landed Properties"){
ggplotly(ggplot(data=placeholder_cuberoot, aes(x=`Landed Properties`)) +
theme_classic() +
geom_histogram(bins=10, color="black", fill="orange") +
ggtitle("Cube root Transformation"))
} else if (input$variable_tab5 == "Others"){
ggplotly(ggplot(data=placeholder_cuberoot, aes(x=`Others`)) +
theme_classic() +
geom_histogram(bins=10, color="black", fill="orange") +
ggtitle("Cube root Transformation"))
} else if (input$variable_tab5 == "Females"){
ggplotly(ggplot(data=placeholder_cuberoot, aes(x=`Females`)) +
theme_classic() +
geom_histogram(bins=10, color="black", fill="orange") +
ggtitle("Cube root Transformation"))
} else if (input$variable_tab5 == "Males"){
ggplotly(ggplot(data=placeholder_cuberoot, aes(x=`Males`)) +
theme_classic() +
geom_histogram(bins=10, color="black", fill="orange") +
ggtitle("Cube root Transformation"))
} else if (input$variable_tab5 == "Rainfall"){
ggplotly(ggplot(data=placeholder_cuberoot, aes(x=`Rainfall`)) +
theme_classic() +
geom_histogram(bins=10, color="black", fill="orange") +
ggtitle("Cube root Transformation"))
} else if (input$variable_tab5 == "Temperature"){
ggplotly(ggplot(data=placeholder_cuberoot, aes(x=`Temperature`)) +
theme_classic() +
geom_histogram(bins=10, color="black", fill="orange") +
ggtitle("Cube root Transformation"))
} else if (input$variable_tab5 == "Subzone Area Size"){
ggplotly(ggplot(data=placeholder_cuberoot, aes(x=`SHAPE_Area`)) +
theme_classic() +
geom_histogram(bins=10, color="black", fill="orange") +
ggtitle("Cube root Transformation"))
}
})
output$eweek_bar <- renderPlotly({
ggplotly(ggplot(dengue_weekly, aes(x=eweek, y=weeklycases)) +
theme_classic() +
geom_bar(stat = "identity", color="black",fill = "lightblue") +
ggtitle("Number of Dengue Cases per EWeek") +
theme(plot.title = element_text(hjust = 0.5)))
# geom_bar(stat = "identity") +
# scale_fill_manual(values = c("yes" = "blue", "no" = "grey" ), guide = FALSE )
})
output$eweek_kde <- renderPlot({
req(input$eweek_num)
eweek_chosen <- dengue %>%
filter(eweek == input$eweek_num) %>%
select ("case ID", "longitude", "latitude","date","eweek")
dengue_sf <- st_as_sf(eweek_chosen, coords = c("longitude", "latitude"), crs=4326) %>%
st_transform(crs=3414)
dengue_sp <- as(dengue_sf, "Spatial")
dengue_sp <- as(dengue_sp, "SpatialPoints")
dengue_ppp <- as(dengue_sp, "ppp")
dengueSG_mpsz = dengue_ppp[mpsz_owin]
dengueSG_mpsz.km = rescale(dengueSG_mpsz, 1000, "km")
chosen_kde_dengue_mpsz_250_byeweek <- density(dengueSG_mpsz.km, sigma=0.25, edge=TRUE, kernel="gaussian")
plot_title <- paste0("Kernel Density Estimation Plot for eweek ",input$eweek_num)
plot(chosen_kde_dengue_mpsz_250_byeweek,main=plot_title)
})
output$eweek_quad <- renderPrint({
req(input$eweek_num)
eweek_chosen <- dengue %>%
filter(eweek == input$eweek_num) %>%
select ("case ID", "longitude", "latitude","date","eweek")
dengue_sf <- st_as_sf(eweek_chosen, coords = c("longitude", "latitude"), crs=4326) %>%
st_transform(crs=3414)
dengue_sp <- as(dengue_sf, "Spatial")
dengue_sp <- as(dengue_sp, "SpatialPoints")
dengue_ppp <- as(dengue_sp, "ppp")
dengueSG_mpsz <- dengue_ppp[mpsz_owin]
dengueSG_mpsz <- quadrat.test(dengueSG_mpsz,
nx = 20, ny = 15,
method="M",
nsim=39,
alternative=c("two.sided"))
dengueSG_mpsz
})
output$eweek_neighbour <- renderPrint({
req(input$eweek_num)
eweek_chosen <- dengue %>%
filter(eweek == input$eweek_num) %>%
select ("case ID", "longitude", "latitude","date","eweek")
dengue_sf <- st_as_sf(eweek_chosen, coords = c("longitude", "latitude"), crs=4326) %>%
st_transform(crs=3414)
dengue_sp <- as(dengue_sf, "Spatial")
dengue_sp <- as(dengue_sp, "SpatialPoints")
dengue_ppp <- as(dengue_sp, "ppp")
dengueSG_mpsz <- dengue_ppp[mpsz_owin]
dengueSG_mpsz <- clarkevans.test(dengueSG_mpsz,
correction="none",
clipregion="mpsz_owin",
alternative=c("two.sided"),
nsim=39)
dengueSG_mpsz
})
output$month_bar <- renderPlotly({
ggplotly(ggplot(dengue_monthly, aes(x=month, y=monthlycases)) +
theme_classic() +
geom_bar(stat = "identity", color="black" ,fill = "lightblue") +
ggtitle("Number of Dengue Cases per Month") +
theme(plot.title = element_text(hjust = 0.5)))
})
output$month_kde <- renderPlot({
req(input$month_chosen)
monthly <- dengue %>%
filter(month == input$month_chosen) %>%
select ("case ID", "longitude", "latitude","date","month")
dengue_sf <- st_as_sf(monthly, coords = c("longitude", "latitude"), crs=4326) %>%
st_transform(crs=3414)
dengue_sp <- as(dengue_sf, "Spatial")
dengue_sp <- as(dengue_sp, "SpatialPoints")
dengue_ppp <- as(dengue_sp, "ppp")
dengueSG_mpsz = dengue_ppp[mpsz_owin]
dengueSG_mpsz.km = rescale(dengueSG_mpsz, 1000, "km")
chosen_kde_dengue_mpsz_250_bymonth <- density(dengueSG_mpsz.km, sigma=0.25, edge=TRUE, kernel="gaussian")
plot_title <- paste0("Kernel Density Estimation Plot for ",input$month_chosen)
plot(chosen_kde_dengue_mpsz_250_bymonth,main=plot_title)
})
output$month_kde <- renderPlot({
req(input$month_chosen)
monthly <- dengue %>%
filter(month == input$month_chosen) %>%
select ("case ID", "longitude", "latitude","date","month")
dengue_sf <- st_as_sf(monthly, coords = c("longitude", "latitude"), crs=4326) %>%
st_transform(crs=3414)
dengue_sp <- as(dengue_sf, "Spatial")
dengue_sp <- as(dengue_sp, "SpatialPoints")
dengue_ppp <- as(dengue_sp, "ppp")
dengueSG_mpsz = dengue_ppp[mpsz_owin]
dengueSG_mpsz.km = rescale(dengueSG_mpsz, 1000, "km")
chosen_kde_dengue_mpsz_250_bymonth <- density(dengueSG_mpsz.km, sigma=0.25, edge=TRUE, kernel="gaussian")
plot_title <- paste0("Kernel Density Estimation Plot for ",input$month_chosen)
plot(chosen_kde_dengue_mpsz_250_bymonth,main=plot_title)
})
output$month_quad <- renderPrint({
req(input$month_chosen)
monthly <- dengue %>%
filter(month == input$month_chosen) %>%
select ("case ID", "longitude", "latitude","date","month")
dengue_sf <- st_as_sf(monthly, coords = c("longitude", "latitude"), crs=4326) %>%
st_transform(crs=3414)
dengue_sp <- as(dengue_sf, "Spatial")
dengue_sp <- as(dengue_sp, "SpatialPoints")
dengue_ppp <- as(dengue_sp, "ppp")
dengueSG_mpsz = dengue_ppp[mpsz_owin]
dengueSG_mpsz <- quadrat.test(dengueSG_mpsz,
nx = 20, ny = 15,
method="M",
nsim=39,
alternative=c("two.sided"))
dengueSG_mpsz
})
output$month_neighbour <- renderPrint({
req(input$month_chosen)
monthly <- dengue %>%
filter(month == input$month_chosen) %>%
select ("case ID", "longitude", "latitude","date","month")
dengue_sf <- st_as_sf(monthly, coords = c("longitude", "latitude"), crs=4326) %>%
st_transform(crs=3414)
dengue_sp <- as(dengue_sf, "Spatial")
dengue_sp <- as(dengue_sp, "SpatialPoints")
dengue_ppp <- as(dengue_sp, "ppp")
dengueSG_mpsz = dengue_ppp[mpsz_owin]
dengueSG_mpsz <- clarkevans.test(dengueSG_mpsz,
correction="none",
clipregion="mpsz_owin",
alternative=c("two.sided"),
nsim=39)
dengueSG_mpsz
})
output$subzone_kde <- renderPlot({
req(input$planning_area_chosen)
dengue_sp <- as(dengue_sf, "Spatial")
dengue_sp <- as(dengue_sp, "SpatialPoints")
dengue_ppp <- as(dengue_sp, "ppp")
mpsz <- readOGR(dsn = "data", layer="MP14_SUBZONE_WEB_PL")
subzone = mpsz[mpsz@data$PLN_AREA_N == input$planning_area_chosen,]
subzone_sp = as(subzone, "SpatialPolygons")
subzone_owin = as(subzone_sp, "owin")
dengue_subzone_ppp = dengue_ppp[subzone_owin]
dengue_subzone_ppp.km = rescale(dengue_subzone_ppp, 1000, "km")
chosen_kde_dengue_mpsz_250_bysubzone <- density(dengue_subzone_ppp.km, sigma=0.25, edge=TRUE, kernel="gaussian")
plot_title <- paste0("Kernel Density Estimation Plot for ",input$planning_area_chosen)
plot(chosen_kde_dengue_mpsz_250_bysubzone,main=plot_title)
})
# #Spatio-temporal EDA--------------------------------------------------------------------------------
# inputRange <- reactiveVal()
# inputEDAPlotType <- reactiveVal()
# inputSpatioTemporalEDAPlanningArea <- reactiveVal()
# numberOfDengueCasesSpatioTemporalEDAVal <- reactiveVal()
# # inputSTIKhatPlotType <- reactiveVal()
# # inputCorrectionMethod <- reactiveVal()
#
# .pardefault <- par()
#
# # Main logic
# observeEvent(input$spatioTemporalApplyButton, {
#     inputSpatioTemporalEDAPlanningArea(input$inputSpatioTemporalEDAPlanningArea)
#     inputRange(seq(input$inputRange[1], input$inputRange[2], by=1))
#     inputEDAPlotType(input$inputEDAPlotType)
#     # inputCorrectionMethod(input$inputCorrectionMethod)
#     # inputSTIKhatPlotType(input$inputSTIKhatPlotType)
#
#     print("Spatio-temporal EDA")
#     print(inputSpatioTemporalEDAPlanningArea())
#     print(inputRange())
#     print(inputEDAPlotType())
#     # print(inputCorrectionMethod())
#     # print(inputSTIKhatPlotType())
#
# }, ignoreNULL = F)
#
# output$spatioTemporalEDAPlot <- renderPlot({
#
#
#     SG_planning_area_sf_filtered <- SG_planning_area_sf %>%
#         filter(PLN_AREA_N == inputSpatioTemporalEDAPlanningArea())
#
#     extractCoords <- function(sp.df){
#         results <- list()
#         for(i in 1:length(sp.df@polygons[[1]]@Polygons))
#         {
#             results[[i]] <- sp.df@polygons[[1]]@Polygons[[i]]@coords
#         }
#         results <- Reduce(rbind, results)
#         results
#     }
#     SG_planning_area_spdf <- as(SG_planning_area_sf_filtered, "Spatial")
#     SG_planning_area_xy <<- extractCoords(SG_planning_area_spdf)/1000
#
#     # print(inputEDAPlotType())
#
#
#
#     dengue_sf_temporal$eweek <- as.numeric(dengue_sf_temporal$eweek)
#     dengue_sf_temporal_filtered <- dengue_sf_temporal %>%
#         filter(eweek %in% inputRange())
#     print(unique(dengue_sf_temporal_filtered$eweek))
#
#
#     dengue_sf_intersect <- !st_intersects(SG_planning_area_sf_filtered, dengue_sf_temporal_filtered)
#     if(length(dengue_sf_intersect[[1]]) > 0){
#         dengue_sf_temporal_filtered <- dengue_sf_temporal_filtered[-dengue_sf_intersect[[1]],]
#     }
#
#
#     dengue_sf_temoporal_jitter <- st_jitter(dengue_sf_temporal_filtered)
#
#
#
#     dengue_sf_temoporal_jitter <<- dengue_sf_temoporal_jitter
#     numberOfSpatialTemporalEDADengueCase <<- nrow(dengue_sf_temoporal_jitter)
#     print(numberOfSpatialTemporalEDADengueCase)
#
#     if(length(inputRange()) > 1){
#         print("More than 1 eweek selected")
#         if(nrow(dengue_sf_temoporal_jitter) <10){
#             numberOfDengueCasesSpatioTemporalEDAVal(FALSE)
#         }
#         else{
#             numberOfDengueCasesSpatioTemporalEDAVal(TRUE)
#             dengue_xy <- st_coordinates(dengue_sf_temoporal_jitter)
#             dengueWeekInfo <- dengue_sf_temoporal_jitter[["eweek"]]
#             dengue_sf_full <<- as.3dpoints(dengue_xy[,1]/1000,dengue_xy[,2]/1000,dengueWeekInfo)
#
#             plot(dengue_sf_full, s.region=SG_planning_area_xy, type=inputEDAPlotType())
#         }
#     }
#
#
#
# })
#
# output$insufficientPointsSpatioTemporalEDAMessageOutput <- renderText({
#     if(length(inputRange())<2){
#         return("Please select more than 1 eweek.")
#     }
#     else{
#         if(numberOfDengueCasesSpatioTemporalEDAVal()){
#             paste("There are ", numberOfSpatialTemporalEDADengueCase, " dengue cases at ", inputSpatioTemporalEDAPlanningArea(), " in eweeks ", inputRange()[1], " to ", inputRange()[length(inputRange())] ,".", sep="")
#         }
#         else{
#             paste("There are insufficient Dengue Cases for Point Patterns Analysis at ", inputSpatioTemporalEDAPlanningArea(), " in eweeks ", inputRange()[1], " to ", inputRange()[length(inputRange())] ,". Please select other options.", sep="")
#         }
#     }
# })
#
# #Spatio-temporal Analysis--------------------------------------------------------------------------------
# inputSpatioTemporalRange <- reactiveVal()
# # inputSpatioTemporalCorrectionMethod <- reactiveVal()
# inputSpatioTemporalAnalysisPlanningArea <- reactiveVal()
# numberOfDengueCasesSpatioTemporalAnalysisVal <- reactiveVal()
# .pardefault <- par()
#
# # Main logic
# observeEvent(input$spatioTemporalAnalysisApplyButton, {
#     inputSpatioTemporalAnalysisPlanningArea(input$inputSpatioTemporalAnalysisPlanningArea)
#     inputSpatioTemporalRange(seq(input$inputSpatioTemporalRange[1], input$inputSpatioTemporalRange[2], by=1))
#     # inputSpatioTemporalCorrectionMethod(input$inputSpatioTemporalCorrectionMethod)
#
#     print("Spatio-temporal Analysis")
#     print(inputSpatioTemporalRange())
#     print(inputSpatioTemporalAnalysisPlanningArea())
#     # print(inputSpatioTemporalCorrectionMethod())
# }, ignoreNULL = F)
#
#
# STIK_dengue_infectious_fn <- reactive({
#     print("Calculating STIKhat...")
#
#
#     #--------------------------------------------
#
#     SG_planning_area_sf_filtered <<- SG_planning_area_sf %>%
#         filter(PLN_AREA_N == inputSpatioTemporalAnalysisPlanningArea())
#
#     extractCoords <- function(sp.df){
#         results <- list()
#         for(i in 1:length(sp.df@polygons[[1]]@Polygons))
#         {
#             results[[i]] <- sp.df@polygons[[1]]@Polygons[[i]]@coords
#         }
#         results <- Reduce(rbind, results)
#         results
#     }
#     SG_planning_area_spdf <- as(SG_planning_area_sf_filtered, "Spatial")
#     SG_planning_area_xy <<- extractCoords(SG_planning_area_spdf)/1000
#
#     print(inputEDAPlotType())
#
#
#
#     dengue_sf_temporal$eweek <- as.numeric(dengue_sf_temporal$eweek)
#     dengue_sf_temporal_filtered <- dengue_sf_temporal %>%
#         filter(eweek %in% inputSpatioTemporalRange())
#     print(inputSpatioTemporalRange())
#     # print(dengue_sf_temporal_filtered$eweek)
#
#
#     dengue_sf_intersect <- !st_intersects(SG_planning_area_sf_filtered, dengue_sf_temporal_filtered)
#     if(length(dengue_sf_intersect[[1]]) > 0){
#         dengue_sf_temporal_filtered <- dengue_sf_temporal_filtered[-dengue_sf_intersect[[1]],]
#     }
#
#
#     dengue_sf_temoporal_jitter <- st_jitter(dengue_sf_temporal_filtered)
#
#
#
#     dengue_sf_temoporal_jitter <<- dengue_sf_temoporal_jitter
#     numberOfSpatialTemporalAnalysisDengueCase <<- nrow(dengue_sf_temoporal_jitter)
#     print(numberOfSpatialTemporalAnalysisDengueCase)
#     if(length(inputSpatioTemporalRange()) > 1){
#         if(nrow(dengue_sf_temoporal_jitter) <10){
#             numberOfDengueCasesSpatioTemporalAnalysisVal(FALSE)
#             return(NULL)
#         }
#         else{
#             numberOfDengueCasesSpatioTemporalAnalysisVal(TRUE)
#             dengue_xy <- st_coordinates(dengue_sf_temoporal_jitter)
#             dengueWeekInfo <- dengue_sf_temoporal_jitter[["eweek"]]
#             dengue_sf_full <<- as.3dpoints(dengue_xy[,1]/1000,dengue_xy[,2]/1000,dengueWeekInfo)
#             return(STIKhat(dengue_sf_full, correction="isotropic", infectious=TRUE, s.region = SG_planning_area_xy))
#             # plot(dengue_sf_full, s.region=SG_planning_area_xy, type=inputEDAPlotType())
#         }
#     }
#
#
#     #-------------------
#     # dengue_sf_temporal$eweek <- as.numeric(dengue_sf_temporal$eweek)
#     # dengue_sf_temporal_filtered <- dengue_sf_temporal %>%
#     #   filter(eweek %in% inputSpatioTemporalRange())
#     # print(inputSpatioTemporalRange())
#     # dengue_sf_temoporal_jitter <- st_jitter(dengue_sf_temporal_filtered)
#     #
#     # dengue_sf_intersect <- !st_intersects(SG_main_sf, dengue_sf_temoporal_jitter)
#     # if(length(dengue_sf_intersect[[1]]) > 0){
#     #   dengue_sf_temoporal_jitter <- dengue_sf_temoporal_jitter[-dengue_sf_intersect[[1]],]
#     # }
#     # dengue_sf_temoporal_jitter <<- dengue_sf_temoporal_jitter
#     #
#     # ## Convert geometry to x and y values
#     # # for dengue cases
#     # dengue_xy <- st_coordinates(dengue_sf_temoporal_jitter)
#     # dengueWeekInfo <- dengue_sf_temoporal_jitter[["eweek"]]
#     #
#     # dengue_sf_full <<- as.3dpoints(dengue_xy[,1]/1000,dengue_xy[,2]/1000,dengueWeekInfo)
#     # # for basemap
#     # extractCoords <- function(sp.df){
#     #   results <- list()
#     #   for(i in 1:length(sp.df@polygons[[1]]@Polygons))
#     #   {
#     #     results[[i]] <- sp.df@polygons[[1]]@Polygons[[i]]@coords
#     #   }
#     #   results <- Reduce(rbind, results)
#     #   results
#     # }
#     # SG_main_spdf <- as(SG_main_sf, "Spatial")
#     # SG_main_xy <<- extractCoords(SG_main_spdf)/1000
#
#
#
#
#
#
#
#
#
#     # numberOfSpatialTemporalAnalysisDengueCase
#
#
#
#
#     # print(inputEDAPlotType())
#     # plot(dengue_sf_full, s.region=SG_main_xy, type=inputEDAPlotType())
#
# })
#
# output$insufficientPointsSpatioTemporalAnalysisMessageOutput <- renderText({
#     if(length(inputSpatioTemporalRange())<2){
#         return("Please select more than 1 eweek.")
#     }
#     else{
#         if(numberOfDengueCasesSpatioTemporalAnalysisVal()){
#             paste("There are ", numberOfSpatialTemporalAnalysisDengueCase, " dengue cases at ", inputSpatioTemporalAnalysisPlanningArea(), " in eweeks ", inputSpatioTemporalRange()[1], " to ", inputSpatioTemporalRange()[length(inputSpatioTemporalRange())] ,".", sep="")
#         }
#         else{
#             paste("There are insufficient Dengue Cases for Point Patterns Analysis at ", inputSpatioTemporalAnalysisPlanningArea(), " in eweeks ", inputSpatioTemporalRange()[1], " to ", inputSpatioTemporalRange()[length(inputSpatioTemporalRange())] ,". Please select other options.", sep="")
#         }
#     }
# })
# spatioTemporalAnalysisPlot
# output$spatioTemporalAnalysisAreaPlot <- renderPlot({
#     if(!is.null(STIK_dengue_infectious_fn())){
#         plot(SG_planning_area_sf_filtered$geometry)
#         plot(dengue_sf_temoporal_jitter, add=TRUE)
#     }
# })
# output$contourPlot <- renderPlot({
#     # plot(dengue_sf_full, s.region=SG_main_xy, pch = 19, mark = TRUE)
#     # STIK_dengue_infectious <- STIKhat(dengue_sf_full, correction=inputCorrectionMethod(), infectious=TRUE, s.region = SG_main_xy)
#     # plotK(STIK_dengue_infectious_fn(), L = TRUE, type='persp',theta=-45,phi=35)
#
#     # plotK(K = STIK_dengue_infectious_fn(), L = TRUE, type = "contour")
#     # print(STIK_dengue_infectious_fn())
#     # print(input$inputSTIKhatPlotType)
#     print(!is.null(STIK_dengue_infectious_fn()))
#     print("Contour")
#     if(!is.null(STIK_dengue_infectious_fn())){
#         par(.pardefault)
#         stpp::plotK(K = STIK_dengue_infectious_fn(), L = TRUE, type = "contour")
#     }
# })
#
# output$perspPlot <- renderPlot({
#     # plot(dengue_sf_full, s.region=SG_main_xy, pch = 19, mark = TRUE)
#     # STIK_dengue_infectious <- STIKhat(dengue_sf_full, correction=inputCorrectionMethod(), infectious=TRUE, s.region = SG_main_xy)
#     # plotK(STIK_dengue_infectious_fn(), L = TRUE, type='persp',theta=-45,phi=35)
#
#     # plotK(K = STIK_dengue_infectious_fn(), L = TRUE, type = "contour")
#     # print(STIK_dengue_infectious_fn())
#     # print(input$inputSTIKhatPlotType)
#     print(!is.null(STIK_dengue_infectious_fn()))
#     print("Persp")
#     if(!is.null(STIK_dengue_infectious_fn())){
#         par(.pardefault)
#         stpp::plotK(K=STIK_dengue_infectious_fn(), L=TRUE, type="persp", theta=-45, phi=35)
#     }
#
# })
#
# output$imagePlot <- renderPlot({
#     # plot(dengue_sf_full, s.region=SG_main_xy, pch = 19, mark = TRUE)
#     # STIK_dengue_infectious <- STIKhat(dengue_sf_full, correction=inputCorrectionMethod(), infectious=TRUE, s.region = SG_main_xy)
#     # plotK(STIK_dengue_infectious_fn(), L = TRUE, type='persp',theta=-45,phi=35)
#
#     # plotK(K = STIK_dengue_infectious_fn(), L = TRUE, type = "contour")
#     # print(STIK_dengue_infectious_fn())
#     # print(input$inputSTIKhatPlotType)
#     print(!is.null(STIK_dengue_infectious_fn()))
#     print("Image")
#     if(!is.null(STIK_dengue_infectious_fn())){
#         par(.pardefault)
#         stpp::plotK(K = STIK_dengue_infectious_fn(), L = TRUE, type = "image")
#     }
#
# })
output$spatio_text1_1 <- renderUI({"Due to deployment issues, this feature is not deployed. Therefore, please refer to our Project Write up for our Spatial Temporal Exploratory Data Analysis:"})
output$spatio_text1_2 <- renderUI({tagList(url1)})
output$spatio_text2_1 <- renderUI({"Due to deployment issues, this feature is not deployed. Therefore, please refer to our Project Write up for our Spatial Temporal Analysis:"})
output$spatio_text2_2 <- renderUI({tagList(url1)})
}
shinyApp(ui, server)
shinyApp(ui, server)
